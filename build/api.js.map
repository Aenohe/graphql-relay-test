{"version":3,"sources":["webpack:///api.js","webpack:///webpack/bootstrap b25fa2f5293ad43195f5","webpack:///./server/server.js","webpack:///external \"express\"","webpack:///./server/schema.js","webpack:///external \"graphql\"","webpack:///external \"body-parser\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_express","_express2","_schema","_schema2","_graphql","_bodyParser","_bodyParser2","app","PORT","use","text","type","post","req","res","graphql","body","then","result","send","JSON","stringify","listen","require","Object","defineProperty","value","count","schema","GraphQLSchema","query","GraphQLObjectType","name","fields","GraphQLInt","description","resolve","mutation","increment"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,EAASH,GAE/B,YAEA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAAWF,GAEzF,GAAIG,GAAWf,EElDI,GFoDfgB,EAAYL,EAAuBI,GAEnCE,EAAUjB,EErDI,GFuDdkB,EAAWP,EAAuBM,GAElCE,EAAWnB,EEvDQ,GFyDnBoB,EAAcpB,EExDI,GF0DlBqB,EAAeV,EAAuBS,GExDvCE,EAAMN,EAAA,aACJO,EAAO,GAEbD,GAAIE,IAAIH,EAAA,WAAWI,MAAOC,KAAM,yBAEhCJ,EAAIK,KAAK,WAAY,SAACC,EAAKC,GACzBV,EAAAW,QAAAZ,EAAA,WAAgBU,EAAIG,MACjBC,KAAK,SAACC,GACLJ,EAAIK,KAAKC,KAAKC,UAAUH,EAAQ,KAAM,QAI5CX,EAAIe,OAAOd,IF6DL,SAASnB,EAAQD,GG/EvBC,EAAAD,QAAAmC,QAAA,YHqFM,SAASlC,EAAQD,EAASH,GAS/B,YAEAuC,QAAOC,eAAerC,EAAS,cAC7BsC,OAAO,GAGT,IAAItB,GAAWnB,EIzFT,GAEH0C,EAAQ,GAERC,EAAS,GAAAxB,GAAAyB,eACXC,MAAO,GAAA1B,GAAA2B,mBACLC,KAAM,gBACNC,QACEN,OACEhB,KAAIP,EAAA8B,WACJC,YAAa,mBACbC,QAAS,WACP,MAAOT,QAKfU,SAAU,GAAAjC,GAAA2B,mBACRC,KAAM,mBACNC,QACEK,WACE3B,KAAIP,EAAA8B,WACJC,YAAa,qBACbC,QAAS,WAEP,MADAT,IAAS,QJiGlBvC,GAAQ,WIzFMwC,EJ0FdvC,EAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,GKzIvBC,EAAAD,QAAAmC,QAAA,YL+IM,SAASlC,EAAQD,GM/IvBC,EAAAD,QAAAmC,QAAA","file":"api.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _express = __webpack_require__(1);\n\t\n\tvar _express2 = _interopRequireDefault(_express);\n\t\n\tvar _schema = __webpack_require__(2);\n\t\n\tvar _schema2 = _interopRequireDefault(_schema);\n\t\n\tvar _graphql = __webpack_require__(3);\n\t\n\tvar _bodyParser = __webpack_require__(4);\n\t\n\tvar _bodyParser2 = _interopRequireDefault(_bodyParser);\n\t\n\tvar app = (0, _express2['default'])();\n\tvar PORT = 3000;\n\t\n\tapp.use(_bodyParser2['default'].text({ type: 'application/graphql' }));\n\t\n\tapp.post('/graphql', function (req, res) {\n\t  (0, _graphql.graphql)(_schema2['default'], req.body).then(function (result) {\n\t    res.send(JSON.stringify(result, null, 2));\n\t  });\n\t});\n\t\n\tapp.listen(PORT);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"express\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Get count value: curl -XPOST -H \"Content-Type:application/graphql\"  -d '{ count }' http://localhost:3000/graphql\n\t *\n\t * Get schema informations: curl -XPOST -H \"Content-Type:application/graphql\"  -d '{ __schema { queryType { name, fields { name, description } } } }' http://localhost:3000/graphql\n\t *\n\t */\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tvar _graphql = __webpack_require__(3);\n\t\n\tvar count = 10;\n\t\n\tvar schema = new _graphql.GraphQLSchema({\n\t  query: new _graphql.GraphQLObjectType({\n\t    name: 'RootQueryType',\n\t    fields: {\n\t      count: {\n\t        type: _graphql.GraphQLInt,\n\t        description: 'Test description',\n\t        resolve: function resolve() {\n\t          return count;\n\t        }\n\t      }\n\t    }\n\t  }),\n\t  mutation: new _graphql.GraphQLObjectType({\n\t    name: 'RootMutationType',\n\t    fields: {\n\t      increment: {\n\t        type: _graphql.GraphQLInt,\n\t        description: 'Test 2 description',\n\t        resolve: function resolve() {\n\t          count += 1;\n\t          return count;\n\t        }\n\t      }\n\t    }\n\t  })\n\t});\n\t\n\texports['default'] = schema;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"graphql\");\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"body-parser\");\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** api.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b25fa2f5293ad43195f5\n **/","import express from 'express'\nimport schema from './schema'\n\nimport { graphql } from 'graphql'\nimport bodyParser from 'body-parser'\n\nlet app = express()\nconst PORT = 3000\n\napp.use(bodyParser.text({ type: 'application/graphql' }))\n\napp.post('/graphql', (req, res) => {\n  graphql(schema, req.body)\n    .then((result) => {\n      res.send(JSON.stringify(result, null, 2));\n    })\n})\n\napp.listen(PORT)\n\n\n\n/** WEBPACK FOOTER **\n ** ./server/server.js\n **/","module.exports = require(\"express\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express\"\n ** module id = 1\n ** module chunks = 0\n **/","/*\n * Get count value: curl -XPOST -H \"Content-Type:application/graphql\"  -d '{ count }' http://localhost:3000/graphql\n *\n * Get schema informations: curl -XPOST -H \"Content-Type:application/graphql\"  -d '{ __schema { queryType { name, fields { name, description } } } }' http://localhost:3000/graphql\n *\n */\n\nimport {\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLInt\n} from 'graphql'\n\nlet count = 10\n\nlet schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n      count: {\n        type: GraphQLInt,\n        description: 'Test description',\n        resolve: function() {\n          return count;\n        }\n      }\n    }\n  }),\n  mutation: new GraphQLObjectType({\n    name: 'RootMutationType',\n    fields: {\n      increment: {\n        type: GraphQLInt,\n        description: 'Test 2 description',\n        resolve: function() {\n          count += 1\n          return count\n        }\n      }\n    }\n  })\n});\n\nexport default schema\n\n\n\n/** WEBPACK FOOTER **\n ** ./server/schema.js\n **/","module.exports = require(\"graphql\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"graphql\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require(\"body-parser\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"body-parser\"\n ** module id = 4\n ** module chunks = 0\n **/"],"sourceRoot":""}